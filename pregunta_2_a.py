# -*- coding: utf-8 -*-
"""Copia de Pregunta 2 a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sz-SeqanT9SvKCoZ6bD9GmbUj9Jvbzh6
"""

from google.colab import drive
import os
import pandas as pd

# Montar Google Drive
drive.mount('/content/drive')

# Ruta al archivo CSV (asegúrate de que es la ruta correcta)

file_path = '/content/drive/MyDrive/Breast_Cancer.csv'  # Ajusta la ruta si es necesario


# Verificar si el archivo existe
if os.path.exists(file_path):
    print(f"El archivo existe en: {file_path}")
    # Leer el archivo CSV
    data = pd.read_csv(file_path)
    print("¡Archivo CSV leído correctamente!")
else:
    print(f"Archivo no encontrado en: {file_path}")
    print("Por favor, revisa la ruta del archivo y asegúrate de que está en tu Google Drive.")

# Reload the dataset with the correct delimiter (;)
data = pd.read_csv(file_path, delimiter=';')

# Display the first few rows again
data.head()

# Since the first row is misaligned, we need to manually define the column headers and reload the data
column_names = ['Age', 'Race', 'Marital Status', 'T Stage', 'N Stage', '6th Stage', 'Differentiation',
                'Grade', 'A Stage', 'Tumor Size', 'Estrogen Status', 'Progesterone Status',
                'Survival Months', 'Status']

# Reload the data, skipping the first row that is incorrect
data = pd.read_csv(file_path, delimiter=';', names=column_names, skiprows=1)

# Display the first few rows to ensure the format is correct
data.head()

# ORIGINAL

from google.colab import drive
import os
import pandas as pd

# Montar Google Drive
drive.mount('/content/drive')

# Ruta al archivo CSV
file_path = '/content/drive/MyDrive/Breast_Cancer.csv'  # Ajusta la ruta si es necesario

# Verificar si el archivo existe
if os.path.exists(file_path):
    print(f"El archivo existe en: {file_path}")
    # Leer el archivo CSV
    data = pd.read_csv(file_path, delimiter=';')
    print("¡Archivo CSV leído correctamente!")
else:
    print(f"Archivo no encontrado en: {file_path}")
    print("Por favor, revisa la ruta del archivo y asegúrate de que está en tu Google Drive.")

# Definir nombres de las columnas
column_names = ['Age', 'Race', 'Marital Status', 'T Stage', 'N Stage', '6th Stage', 'Differentiation',
                'Grade', 'A Stage', 'Tumor Size', 'Estrogen Status', 'Progesterone Status',
                'Survival Months', 'Status']

# Leer el archivo nuevamente con los nombres de columnas
data = pd.read_csv(file_path, delimiter=';', names=column_names, skiprows=1)

# Función para calcular percentiles
def percentile(values, percent):
    values = sorted(values)  # Ordenar valores
    k = (len(values) - 1) * (percent / 100.0)
    f = int(k)  # Parte entera
    c = k - f   # Parte decimal
    if f + 1 < len(values):
        return values[f] + (values[f + 1] - values[f]) * c
    else:
        return values[f]

# Función para calcular cuartiles
def quartiles(values):
    q1 = percentile(values, 25)  # Percentil 25
    q2 = percentile(values, 50)  # Mediana
    q3 = percentile(values, 75)  # Percentil 75
    return q1, q2, q3

# Extraer datos numéricos de las columnas
def extract_column_data(data, col_idx):
    column_values = []
    for row in data:
        try:
            value = float(row[col_idx])  # Convertir a flotante
            column_values.append(value)
        except ValueError:
            continue  # Ignorar valores no numéricos
    return column_values

# Calcular percentiles y cuartiles para cada columna
def calculate_statistics(data, headers):
    column_stats = {}
    for col_idx, header in enumerate(headers):
        column_values = extract_column_data(data, col_idx)
        if column_values:  # Solo si hay datos numéricos
            q1, q2, q3 = quartiles(column_values)
            column_stats[header] = {'Q1': q1, 'Q2 (Mediana)': q2, 'Q3': q3}
        else:
            print(f"Columna {header} no contiene datos numéricos válidos.")
    return column_stats

# Calcular estadísticas
column_stats = calculate_statistics(data.values, column_names)

# Mostrar resultados
for col, stats in column_stats.items():
    print(f"Columna: {col}")
    for stat, value in stats.items():
        print(f"  {stat}: {value}")

import matplotlib.pyplot as plt

# Graficar distribuciones
for col_idx, header in enumerate(column_names):
    column_values = extract_column_data(data.values, col_idx)

    if column_values:
        plt.figure(figsize=(10, 6))
        plt.hist(column_values, bins=30, alpha=0.7, color='blue', edgecolor='black')
        plt.title(f'Distribución de {header}')
        plt.xlabel(header)
        plt.ylabel('Frecuencia')
        plt.grid(axis='y', alpha=0.75)
        plt.show()

"""pregunta 2 inciso a"""